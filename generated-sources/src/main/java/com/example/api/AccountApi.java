/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.model.Account;
import com.example.model.AccountTransaction;
import com.example.model.InlineResponse500;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-12T09:31:42.724245+03:00[Asia/Bahrain]")
@Validated
@Api(value = "Account", description = "the Account API")
public interface AccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /accounts : Create a new account
     * Create a new account
     *
     * @param account  (required)
     * @return Account created successfully (status code 201)
     *         or Error response (status code 400)
     *         or Error response (status code 500)
     */

    @ApiOperation(value = "Create a new account", nickname = "createAccount", notes = "Create a new account", response = Account.class, tags={ "Account", })
    @ApiResponses(value = { 

        @ApiResponse(code = 201, message = "Account created successfully", response = Account.class),

        @ApiResponse(code = 400, message = "Error response", response = InlineResponse500.class),

        @ApiResponse(code = 500, message = "Error response", response = InlineResponse500.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Account> createAccount(

@ApiParam(value = "", required = true )   @Valid @RequestBody Account account) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountTypeId\" : 6, \"balance\" : 1.4658129805029452, \"statusId\" : 5, \"customerId\" : 5, \"id\" : 0, \"accountNumber\" : \"accountNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /accounts/{id} : Delete an account by ID
     * Delete an account by ID
     *
     * @param id  (required)
     * @return Account deleted successfully (status code 204)
     *         or Error response (status code 404)
     *         or Error response (status code 500)
     */

    @ApiOperation(value = "Delete an account by ID", nickname = "deleteAccount", notes = "Delete an account by ID", tags={ "Account", })
    @ApiResponses(value = { 

        @ApiResponse(code = 204, message = "Account deleted successfully"),

        @ApiResponse(code = 404, message = "Error response", response = InlineResponse500.class),

        @ApiResponse(code = 500, message = "Error response", response = InlineResponse500.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/accounts/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteAccount(@ApiParam(value = "", required = true) @PathVariable("id") Long id

) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{id} : Retrieve an account by ID
     * Retrieve an account by ID
     *
     * @param id  (required)
     * @return Account details (status code 200)
     *         or Error response (status code 404)
     *         or Error response (status code 500)
     */

    @ApiOperation(value = "Retrieve an account by ID", nickname = "getAccountById", notes = "Retrieve an account by ID", response = Account.class, tags={ "Account", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Account details", response = Account.class),

        @ApiResponse(code = 404, message = "Error response", response = InlineResponse500.class),

        @ApiResponse(code = 500, message = "Error response", response = InlineResponse500.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Account> getAccountById(@ApiParam(value = "", required = true) @PathVariable("id") Long id

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountTypeId\" : 6, \"balance\" : 1.4658129805029452, \"statusId\" : 5, \"customerId\" : 5, \"id\" : 0, \"accountNumber\" : \"accountNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/customer/{customerId} : Retrieve accounts by customer ID
     * Retrieve accounts by customer ID
     *
     * @param customerId  (required)
     * @return Accounts for the customer (status code 200)
     *         or Error response (status code 404)
     *         or Error response (status code 500)
     */

    @ApiOperation(value = "Retrieve accounts by customer ID", nickname = "getAccountsByCustomerId", notes = "Retrieve accounts by customer ID", response = Account.class, responseContainer = "List", tags={ "Account", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Accounts for the customer", response = Account.class, responseContainer = "List"),

        @ApiResponse(code = 404, message = "Error response", response = InlineResponse500.class),

        @ApiResponse(code = 500, message = "Error response", response = InlineResponse500.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/customer/{customerId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Account>> getAccountsByCustomerId(@ApiParam(value = "", required = true) @PathVariable("customerId") Long customerId

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountTypeId\" : 6, \"balance\" : 1.4658129805029452, \"statusId\" : 5, \"customerId\" : 5, \"id\" : 0, \"accountNumber\" : \"accountNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts : Retrieve all accounts
     * Retrieve all accounts
     *
     * @return A list of accounts (status code 200)
     *         or Error response (status code 500)
     */

    @ApiOperation(value = "Retrieve all accounts", nickname = "getAllAccounts", notes = "Retrieve all accounts", response = Account.class, responseContainer = "List", tags={ "Account", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "A list of accounts", response = Account.class, responseContainer = "List"),

        @ApiResponse(code = 500, message = "Error response", response = InlineResponse500.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Account>> getAllAccounts() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountTypeId\" : 6, \"balance\" : 1.4658129805029452, \"statusId\" : 5, \"customerId\" : 5, \"id\" : 0, \"accountNumber\" : \"accountNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accounts/{accountId}/topup : Top up an account
     * Top up an account
     *
     * @param accountId  (required)
     * @param accountTransaction  (required)
     * @return Account topped up successfully (status code 200)
     *         or Error response (status code 400)
     *         or Error response (status code 404)
     *         or Error response (status code 500)
     */

    @ApiOperation(value = "Top up an account", nickname = "topUpAccount", notes = "Top up an account", response = AccountTransaction.class, tags={ "Account", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Account topped up successfully", response = AccountTransaction.class),

        @ApiResponse(code = 400, message = "Error response", response = InlineResponse500.class),

        @ApiResponse(code = 404, message = "Error response", response = InlineResponse500.class),

        @ApiResponse(code = 500, message = "Error response", response = InlineResponse500.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/accounts/{accountId}/topup",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountTransaction> topUpAccount(@ApiParam(value = "", required = true) @PathVariable("accountId") Long accountId

,

@ApiParam(value = "", required = true )   @Valid @RequestBody AccountTransaction accountTransaction) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transactionType\" : \"transactionType\", \"accountId\" : 6, \"amount\" : 1.4658129805029452, \"description\" : \"description\", \"id\" : 0, \"transactionDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /accounts/{id} : Update account information
     * Update account information by ID
     *
     * @param id  (required)
     * @param account  (required)
     * @return Account updated successfully (status code 200)
     *         or Error response (status code 400)
     *         or Error response (status code 404)
     *         or Error response (status code 500)
     */

    @ApiOperation(value = "Update account information", nickname = "updateAccount", notes = "Update account information by ID", response = Account.class, tags={ "Account", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Account updated successfully", response = Account.class),

        @ApiResponse(code = 400, message = "Error response", response = InlineResponse500.class),

        @ApiResponse(code = 404, message = "Error response", response = InlineResponse500.class),

        @ApiResponse(code = 500, message = "Error response", response = InlineResponse500.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/accounts/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Account> updateAccount(@ApiParam(value = "", required = true) @PathVariable("id") Long id

,

@ApiParam(value = "", required = true )   @Valid @RequestBody Account account) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountTypeId\" : 6, \"balance\" : 1.4658129805029452, \"statusId\" : 5, \"customerId\" : 5, \"id\" : 0, \"accountNumber\" : \"accountNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accounts/{accountId}/withdraw : Withdraw from an account
     * Withdraw from an account
     *
     * @param accountId  (required)
     * @param accountTransaction  (required)
     * @return Amount withdrawn successfully (status code 200)
     *         or Error response (status code 400)
     *         or Error response (status code 404)
     *         or Error response (status code 500)
     */

    @ApiOperation(value = "Withdraw from an account", nickname = "withdrawFromAccount", notes = "Withdraw from an account", response = AccountTransaction.class, tags={ "Account", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Amount withdrawn successfully", response = AccountTransaction.class),

        @ApiResponse(code = 400, message = "Error response", response = InlineResponse500.class),

        @ApiResponse(code = 404, message = "Error response", response = InlineResponse500.class),

        @ApiResponse(code = 500, message = "Error response", response = InlineResponse500.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/accounts/{accountId}/withdraw",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountTransaction> withdrawFromAccount(@ApiParam(value = "", required = true) @PathVariable("accountId") Long accountId

,

@ApiParam(value = "", required = true )   @Valid @RequestBody AccountTransaction accountTransaction) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transactionType\" : \"transactionType\", \"accountId\" : 6, \"amount\" : 1.4658129805029452, \"description\" : \"description\", \"id\" : 0, \"transactionDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
